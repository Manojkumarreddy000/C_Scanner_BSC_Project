

# Documentation for "C Scanner and Parser" project
#
# Authors:
#			P Manoj Kumar Reddy		133226
#			A Ranga Shaarad			133221
#
#			Sri Sathya Sai Institute of Higher Learning
#			Brindavan Campus
#

			C Scanner and Parser

***************Project description******************

	C Scanner and Parser is a program which implements a few parts
of the C compiler.

	It takes as input a file containing source code of a C program.

	It gives output in various files and also the screen as described below.


->	The preprocessor removes comments from the source code and stores
multi line comments and single line comments in 2 separate files given below.

->	It also substitutes macros and displays relevant error messages if the
definition of the macro is syntactically incorrect.

->	It also recognises and substitutes macros with as many as ARG_NUM arguments,
where ARG_NUM is a constant defined in the header file.

->	The next stage of the program is a lexical analyser or scanner.
It separates the input source code into tokens and stores it in a new file
ending with .o

-> The next stage of the program prints the code in various C constructs into
different files such as "If.txt","For.txt","While.txt"

-> The next stage identifies the variables declared in the program and prints
the storage class, qualifier, data type and the identifier in a file "Variables.txt".

-> The next stage identifies the various functions declared and defined in the file
and prints it in a file "Functions.txt"

-> The next stage identifies the function call hierarchy and prints it on the screen
that part of the hierarchy which does not form a cycle.



************Limitations and Future works***************************

	The preprocessor and be extended to include other files as well which may contain function
declarations and definitions. Also, standard header files can be included so that even standard 
functions are displayed in the function hierarchy.

	The preprocessor can also be extended to process "typedef" and "enum" uses so that variables of user defined 
data types can be recognised.

	Variables of stucture types also can be recognised.

	The "do-while" and "switch-case" constructs also can be taken care of along with the other constructs.

	This project can be taken to the next stage by using the output of the scanner to build a parse tree 
which further can be processed to create machine code.

	The output of the scanner can also be stored more intelligently by categorising each token and storing the information
so that parsing becomes more efficient and easy.

